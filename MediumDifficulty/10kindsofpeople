package problemos;

import java.util.HashSet;

public class Tenkindsofpeople {

	static char[][] world;
	static boolean[][] explored;
	//static int[][] found_groups;
	int rows, columns;
	final char BINARY = '0', DECIMAL = '1';

	public Tenkindsofpeople(int rows, int columns) {
		world = new char[rows][columns];
		//found_groups = new int[rows][columns];
		this.rows = rows-1;
		this.columns = columns-1;
	}

	public class Point {
		int x, y;
		char type;

		public Point(int x, int y, char type) {
			this.x = x;
			this.y = y;
			this.type = type;
		}

		@Override
		public boolean equals(Object obj) {
			Point other = (Point) obj;
			return ((x == other.x) && (y == other.y));
		}

		@Override
		public int hashCode() {
			return (x+y);
		}
	}

	public Boolean isGoal(Point sp, int r_fin, int c_fin) {
		if(sp.x == r_fin && sp.y == c_fin) {
			if(sp.type == '1') {
				System.out.println("decimal");
			} else {
				System.out.println("binary");
			}
			return true;
		}
		return false;
	}

	public boolean search(int x_start, int y_start, int x_fin, int y_fin) {

		// The frontier is a queue of expanded SearchNodes not processed yet
		HashSet<Point> frontier = new HashSet<Point>(); 
		// Check if coordinates have been explored
		explored = new boolean[rows+1][columns+1]; 

		Point startNode;
		Point a;
		char type;

		if (world[x_start][y_start] == BINARY) {
			startNode = new Point(x_start, y_start, '0');
			type = BINARY;
		} else {
			startNode = new Point(x_start, y_start, '1');
			type = DECIMAL;
		}

		// Initialize the frontier with the start state  
		frontier.add(startNode);

		//in case first node is goal
		if (isGoal(startNode, x_fin, y_fin)) {
			return true;
		}

		while (!frontier.isEmpty()) {

			Point sp = frontier.stream().findFirst().get();

			frontier.remove(sp);

			//Add node to investigate to explored
			explored[sp.x][sp.y] = true;

			if((sp.y > 0) && (world[sp.x][sp.y-1] == type) && (!explored[sp.x][sp.y-1])){
				a = new Point(sp.x, sp.y-1, type);
				if (!frontier.contains(a)) {
					if(isGoal(a, x_fin, y_fin)) {
						return true;
					} else {
						frontier.add(a);
					}
				}
			}

			if((sp.y < columns) && (world[sp.x][sp.y+1] == type) && (!explored[sp.x][sp.y+1])) {
				a = new Point(sp.x, sp.y+1, type);
				if (!frontier.contains(a)) {
					if(isGoal(a, x_fin, y_fin)) {
						return true;
					} else {
						frontier.add(a);
					}
				}
			}

			if((sp.x > 0) && (world[sp.x-1][sp.y] == sp.type) && (!explored[sp.x-1][sp.y])) {

				a = new Point(sp.x-1, sp.y, type);
				if (!frontier.contains(a)) {
					if(isGoal(a, x_fin, y_fin)) {
						return true;
					} else {
						frontier.add(a);
					}
				}

			}

			if((sp.x < rows) && (world[sp.x+1][sp.y] == sp.type) && (!explored[sp.x+1][sp.y])){

				a = new Point(sp.x+1, sp.y, sp.type);
				if (!frontier.contains(a)) {
					if(isGoal(a, x_fin, y_fin)) {
						return true;
					} else {
						frontier.add(a);
					}
				}
			} 
		}
		return false;
	}

	public static void main(String args[]) {

		Kattio io = new Kattio(System.in);
		int rows = io.getInt();
		int columns = io.getInt();
		Tenkindsofpeople elf = new Elevenkindsofpeople(rows, columns);

		for (int i = 0; i < rows; i++) {
			world[i] = io.getWord().toCharArray();
		}

		int queries = io.getInt();

		for(int i = 0; i < queries; i++) {
			if (!elf.search(io.getInt()-1, io.getInt()-1, io.getInt()-1, io.getInt()-1)) {
				System.out.println("neither");
			}
		}
	}
}
